import requests
import csv
import time

def create_vulnerability_export(project_id, headers, separate_files):
    # Create vulnerability export
    create_export_url = f"https://gitlab.com/api/v4/security/projects/{project_id}/vulnerability_exports"
    create_export_response = requests.post(create_export_url, headers=headers)
    if create_export_response.status_code == 201:
        print("Vulnerability export created successfully.")
        export_id = create_export_response.json()["id"]
        print("Export ID:", export_id)
        time.sleep(1)  # Add a short delay before downloading
        # Download vulnerability export with retry
        max_retries = 5
        retries = 0
        while retries < max_retries:
            download_url = f"https://gitlab.com/api/v4/security/vulnerability_exports/{export_id}/download"
            download_response = requests.get(download_url, headers=headers)
            if download_response.status_code == 200:
                filename = f"vulnerability_export_{export_id}.csv" if separate_files else "vulnerability_export_all.csv"
                with open(filename, "wb") as file:
                    file.write(download_response.content)
                print(f"Vulnerability export downloaded successfully. Saved as {filename}")

                # Add gitlink and solution columns to the CSV file
                with open(filename, 'r') as file:
                    reader = csv.DictReader(file)
                    fieldnames = reader.fieldnames
                    if "gitlink" not in fieldnames:
                        fieldnames.append("gitlink")
                    if "solution" not in fieldnames:
                        fieldnames.append("solution")
                    rows = list(reader)

                for row in rows:
                    vulnerability_id = row["Full Path"].split('/')[-1]
                    gitlink = f"https://gitlab.com/{row['Full Path'].replace('/', '/-/security/vulnerabilities/')}"
                    solution_url = f"https://gitlab.com/api/v4/vulnerabilities/{vulnerability_id}"
                    solution_response = requests.get(solution_url, headers=headers)
                    if solution_response.status_code == 200:
                        solution = solution_response.json().get("finding", {}).get("solution", "")
                        row["gitlink"] = gitlink
                        row["solution"] = solution
                        print(f"Vulnerability ID: {vulnerability_id}, Gitlink: {gitlink}, Solution: {solution}")
                    else:
                        print(f"Failed to fetch solution for vulnerability ID: {vulnerability_id}")

                with open(filename, 'w', newline='') as file:
                    writer = csv.DictWriter(file, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(rows)

                break
            elif download_response.status_code == 404:
                retries += 1
                print(f"Failed to download vulnerability export. Retrying... (Attempt {retries}/{max_retries})")
                time.sleep(1)  # Add a short delay before retrying
            else:
                print(f"Failed to download vulnerability export. Status code: {download_response.status_code}")
                print(f"Response: {download_response.text}")
                break
        else:
            print(f"Failed to download vulnerability export after {max_retries} retries.")
    else:
        print(f"Failed to create vulnerability export. Status code: {create_export_response.status_code}")
        print(f"Response: {create_export_response.text}")

# GitLab API endpoint for listing projects in a group
url = "https://gitlab.com/api/v4/groups/entergroupid/projects"

# GitLab access token
headers = {
    "PRIVATE-TOKEN": "enter your token"
}

# Send GET request to GitLab API
response = requests.get(url, headers=headers)

# Check if request was successful
if response.status_code == 200:
    # Parse JSON response
    projects = response.json()
    # Iterate over projects and print ID and name
    for index, project in enumerate(projects, 1):
        print(f"{index}. ID: {project['id']}, Name: {project['name']}")
        print("="*50)

    # Ask user for project index
    project_index = input("Enter project index to fetch vulnerability report (1, 2, 3, ...) or 'all' for all projects: ")
    separate_files = input("Create separate files for each project (y/n)? ").lower() == 'y'
    if project_index.lower() == 'all':
        for project in projects:
            create_vulnerability_export(project["id"], headers, separate_files)
    else:
        try:
            project_id = projects[int(project_index)-1]["id"]
            create_vulnerability_export(project_id, headers, separate_files)
        except (ValueError, IndexError):
            print("Invalid project index.")
else:
    # Print error message if request failed
    print("Failed to fetch projects:", response.status_code, response.text)
