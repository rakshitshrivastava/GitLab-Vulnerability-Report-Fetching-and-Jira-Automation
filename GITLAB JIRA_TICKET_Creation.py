import pandas as pd
from datetime import datetime, timedelta
from jira import JIRA
import getpass
import logging
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load Jira credentials from environment variables
JIRA_SERVER = os.getenv('JIRA_SERVER')
JIRA_PROJECT_KEY = os.getenv('JIRA_PROJECT_KEY')

def load_data(file_path):
    """Load and preprocess the CSV data."""
    df = pd.read_csv(file_path)
    df = df.dropna(subset=['Details', 'CVE'])
    return df

def consolidate_entries(df):
    """Consolidate entries for the same CVE and Project Name."""
    df_grouped = df.groupby(['CVE', 'Project Name']).agg({
        'Vulnerability': 'first',
        'Details': 'first',
        'Location': lambda x: '\n'.join(x),
        'gitlink': lambda x: '\n'.join(x),
        'Severity': 'first',
        'solution': 'first'
    }).reset_index()
    return df_grouped

def calculate_due_dates(df):
    """Calculate due dates based on severity."""
    severity_to_timedelta = {
        'critical': timedelta(days=30),
        'high': timedelta(days=60),
        'medium': timedelta(days=90),
        'low': timedelta(days=120)
    }
    df['Due Date'] = datetime.now() + df['Severity'].map(severity_to_timedelta)
    return df

def save_to_json(df, file_path):
    """Save the DataFrame to a JSON file."""
    df.to_json(file_path, orient='records', lines=True)

def authenticate_jira(server, email, api_token):
    """Authenticate with Jira."""
    return JIRA(server, basic_auth=(email, api_token))

def create_jira_issues(jira, df, project_key, severity_to_priority):
    """Create Jira issues from the DataFrame."""
    for index, row in df.iterrows():
        issue_dict = {
            'project': {'key': project_key},
            'summary': f"{row['Vulnerability']} - {row['Project Name']} ({row['CVE']})",
            'description': (
                f"Details:\n{row['Details']}\n\nContainer name: {row['Project Name']}\nCVE ID: {row['CVE']}\n"
                f"Location:\n{row['Location']}\n\nGitLab Link:\n{row['gitlink']}\n\nSeverity: {row['Severity']}\n\n"
                f"RECOMMENDATION:\n{row['solution']}"
            ),
            'duedate': row['Due Date'].strftime('%Y-%m-%d'),
            'issuetype': {'name': 'Security Bug'},
            'priority': {'name': severity_to_priority.get(row['Severity'], 'High')}
        }
        try:
            issue = jira.create_issue(fields=issue_dict)
            logging.info(f"Created Jira ticket: {issue.key}")
            add_labels_to_issue(issue, row)
        except Exception as e:
            logging.error(f"Failed to create Jira ticket for CVE {row['CVE']}: {e}")

def add_labels_to_issue(issue, row):
    """Add labels to a Jira issue."""
    labels = [row['CVE'], row['Project Name'].replace(" ", "_"), "GITLAB_Automation"]
    try:
        issue.update(fields={"labels": labels})
        logging.info(f"Added labels {labels} to issue {issue.key}")
    except Exception as e:
        logging.error(f"Failed to add labels to issue {issue.key}: {e}")

def main():
    # Load and preprocess data
    df = load_data('your_csv_file.csv')
    df_grouped = consolidate_entries(df)
    df_grouped = calculate_due_dates(df_grouped)
    save_to_json(df_grouped, 'output_modified.json')

    # Authenticate with Jira
    email = input("Enter your Jira email: ")
    api_token = getpass.getpass(prompt="Enter your Jira API token: ")

    jira = authenticate_jira(JIRA_SERVER, email, api_token)

    # Map severity to priority
    severity_to_priority = {
        'critical': 'Critical',
        'high': 'High',
        'medium': 'Medium',
        'low': 'Low'
    }

    # Create Jira issues
    create_jira_issues(jira, df_grouped, JIRA_PROJECT_KEY, severity_to_priority)

    logging.info("Tickets created successfully!")

if __name__ == "__main__":
    main()
