import pandas as pd
from datetime import datetime, timedelta
from jira import JIRA
import getpass

# Read the CSV file
df = pd.read_csv('your_csv_file.csv')

# Drop rows with missing 'Details' or 'CVE' columns
df = df.dropna(subset=['Details', 'CVE'])

# Consolidate entries for the same CVE and Project Name
df_grouped = df.groupby(['CVE', 'Project Name']).agg({
    'Vulnerability': 'first',
    'Details': 'first',
    'Location': lambda x: '\n'.join(x),
    'gitlink': lambda x: '\n'.join(x),
    'Severity': 'first',
    'solution': 'first'
}).reset_index()

# Calculate due date based on severity
df_grouped['Due Date'] = datetime.now() + df_grouped['Severity'].map({
    'critical': timedelta(days=30),
    'high': timedelta(days=60),
    'medium': timedelta(days=90),
    'low': timedelta(days=120)
})

# Map severity to priority
severity_to_priority = {
    'critical': 'Critical',
    'high': 'High',
    'medium': 'Medium',
    'low': 'Low'
}

# Convert to JSON and save to file
df_grouped.to_json('output_modified.json', orient='records', lines=True)

# Authenticate with Jira
JIRA_SERVER = 'https://YOURJIRADOMAIN.atlassian.net'
email = input("Enter your Jira email: ")
api_token = getpass.getpass(prompt="Enter your Jira API token: ")

# Encode API token as UTF-8
api_token = api_token.encode('utf-8')

jira = JIRA(JIRA_SERVER, basic_auth=(email, api_token))

# Create Jira tickets
for index, row in df_grouped.iterrows():
    issue_dict = {
        'project': {'key': 'yourprojectkey'},
        'summary':  f"{row['Vulnerability']} - {row['Project Name']} ({row['CVE']})",
        'description': f"Details:\n{row['Details']}\n\nContainer name: {row['Project Name']}\nCVE ID: {row['CVE']}\nLocation:\n{row['Location']}\n\nGitLab Link:\n{row['gitlink']}\n\nSeverity: {row['Severity']}\n\nRECOMMENDATION:\n{row['solution']}",
        'duedate': row['Due Date'].strftime('%Y-%m-%d'),
        'issuetype': {'name': 'Security Bug'},
        'priority': {'name': severity_to_priority.get(row['Severity'], 'High')}  # Use 'High' as default if mapping not found
    }
    issue = jira.create_issue(fields=issue_dict)
    print(f"Created Jira ticket: {issue.key}")

    # Add labels
    labels = [f"{row['CVE']}", row['Project Name'].replace(" ", "_"), "GITLAB_Automation"]  # Add your labels here
    issue.update(fields={"labels": labels})
    print(f"Added labels {labels} to issue {issue.key}")

print("Tickets created successfully!")
